name: CI/CD
on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'corretto'

      - name: Get current time
        run: echo "CURRENT_TIME=$(date +'%Y-%m-%dT%H-%M-%S')" >> $GITHUB_ENV

      - name: Grant execute permission for gradlew
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew clean build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create .env file
        run: |
          echo "SPRING_PROFILES_ACTIVE=prod" > .env
          echo "SPRING_DATASOURCE_URL=${{ secrets.SPRING_DATASOURCE_URL }}" >> .env
          echo "SPRING_DATASOURCE_USERNAME=${{ secrets.SPRING_DATASOURCE_USERNAME }}" >> .env
          echo "SPRING_DATASOURCE_PASSWORD=${{ secrets.SPRING_DATASOURCE_PASSWORD }}" >> .env
          echo "KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}" >> .env
          echo "JASYPT_ENCRYPTOR_PASSWORD=${{ secrets.JASYPT_ENCRYPTOR_PASSWORD }}" >> .env
          echo "AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}" >> .env
          echo "AWS_REGION=${{secrets.AWS_REGION}}" >> .env
          echo "SPRING_FLYWAY_BASELINE_ON_MIGRATE=true" >> .env
          echo "CURRENT_TIME=${{ env.CURRENT_TIME }}" >> .env

      - name: Create ECR repository if not exists
        run: |
          aws ecr describe-repositories --repository-names raindrop-app || aws ecr create-repository --repository-name raindrop-app

      - name: Build and push Docker image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: raindrop-app
          IMAGE_TAG: ${{ env.CURRENT_TIME }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      

      - name: Update Dockerrun.aws.json
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          sed -i "s|%AWS_ACCOUNT_ID%|${{ secrets.AWS_ACCOUNT_ID }}|g" Dockerrun.aws.json
          sed -i "s|%AWS_REGION%|ap-northeast-2|g" Dockerrun.aws.json

      - name: Generate deployment package
        run: |
          mkdir -p .platform/nginx/conf.d/
          touch .platform/nginx/conf.d/.keep
          cp ./build/libs/demo-0.0.1-SNAPSHOT.jar ./app.jar
          zip -r deploy.zip Dockerrun.aws.json .platform .ebextensions .env app.jar Procfile

      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: springboot-developer
          environment_name: Springboot-developer-env
          version_label: github-action-${{ env.CURRENT_TIME }}
          region: ap-northeast-2
          deployment_package: deploy.zip
          wait_for_environment_recovery: 600
          use_existing_version_if_available: false
